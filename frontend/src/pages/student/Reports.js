import React, { useEffect, useState } from 'react';
import { apiRequest } from '../../api';
import { useAuth } from '../../context/AuthContext';
import { FaFileCsv, FaFileExcel, FaTrash } from 'react-icons/fa';

export default function StudentReports() {
  const { user } = useAuth();
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [semester, setSemester] = useState('');
  const [reportType, setReportType] = useState('All');
  const [format, setFormat] = useState('xlsx');
  const [generating, setGenerating] = useState(false);
  const [msg, setMsg] = useState('');
  const [studentId, setStudentId] = useState(null);

  // Fetch student profile and set studentId on mount
  useEffect(() => {
    const fetchStudentId = async () => {
      if (!user || !user._id) return;
      try {
        const student = await apiRequest('/student/my');
        if (student && student._id) {
          setStudentId(student._id);
        } else {
          setError('Student profile not found');
        }
      } catch (err) {
        setError('Failed to fetch student profile');
      }
    };
    fetchStudentId();
  }, [user]);

  // Fetch reports generated by the authenticated student
  const fetchReports = async () => {
    setLoading(true);
    setError('');
    try {
      // Use the new endpoint for self-generated reports
      const res = await apiRequest('/report/generated-by-me');
      setReports(Array.isArray(res) ? res : []);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = async (id, format) => {
    try {
      const token = localStorage.getItem('token');
      // Use the correct student download endpoint
      const url = `${window.location.origin.replace(/:[0-9]+$/, ':5000')}/api/report/my/${id}/download?format=${format}`;
      const res = await fetch(url, { headers: { 'Authorization': `Bearer ${token}` } });
      if (!res.ok) throw new Error('Failed to download report.');
      const blob = await res.blob();
      const link = document.createElement('a');
      link.href = window.URL.createObjectURL(blob);
      link.download = `report_${id}.${format}`;
      link.click();
    } catch (err) {
      alert('Failed to download report.');
    }
  };

  const handleGenerate = async (e) => {
    e.preventDefault();
    if (!studentId) { setError('Student profile not loaded'); return; }
    if (!semester) { setError('Please select a semester'); return; }
    setGenerating(true);
    setError('');
    setMsg('');
    try {
      const token = localStorage.getItem('token');
      const url = `${window.location.origin.replace(/:[0-9]+$/, ':5000')}/api/report/student/${studentId}?semester=${semester}&reportType=${reportType}&format=${format}`;
      const res = await fetch(url, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` }
      });
      if (!res.ok) throw new Error('Failed to generate/download report');
      const blob = await res.blob();
      const link = document.createElement('a');
      link.href = window.URL.createObjectURL(blob);
      link.download = `student_report_${studentId}_${semester}.${format}`;
      link.click();
      setMsg('Report generated and downloaded!');
      fetchReports();
    } catch (err) {
      setError(err.message || 'Failed to generate report');
    } finally {
      setGenerating(false);
    }
  };

  // Delete a single report
  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this report?')) return;
    try {
      await apiRequest(`/report/my/${id}`, { method: 'DELETE' });
      setReports(reports.filter(r => r._id !== id));
    } catch (err) {
      setError(err.message || 'Failed to delete report');
    }
  };

  // Bulk delete selected reports
  const [selected, setSelected] = useState([]);
  const handleSelect = (id) => {
    setSelected(selected.includes(id) ? selected.filter(s => s !== id) : [...selected, id]);
  };
  const handleBulkDelete = async () => {
    if (selected.length === 0) return;
    if (!window.confirm(`Delete ${selected.length} selected reports?`)) return;
    try {
      await apiRequest('/report/my/bulk-delete', { method: 'POST', body: { ids: selected } });
      setReports(reports.filter(r => !selected.includes(r._id)));
      setSelected([]);
    } catch (err) {
      setError(err.message || 'Bulk delete failed');
    }
  };

  useEffect(() => { fetchReports(); }, [studentId]);

  return (
    <div className="p-8 max-w-5xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">My Reports</h2>
      <form className="mb-6 flex flex-wrap gap-4 items-end" onSubmit={handleGenerate}>
        <div>
          <label className="block text-sm font-semibold mb-1">Semester</label>
          <select value={semester} onChange={e => setSemester(e.target.value)} className="border rounded px-3 py-1" required>
            <option value="">Select Semester</option>
            <option value="sem1">Sem 1</option>
            <option value="sem2">Sem 2</option>
          </select>
        </div>
        <div>
          <label className="block text-sm font-semibold mb-1">Report Type</label>
          <select value={reportType} onChange={e => setReportType(e.target.value)} className="border rounded px-3 py-1">
            <option value="All">All</option>
            <option value="Performance">Performance</option>
            <option value="Attendance">Attendance</option>
            <option value="Marks">Marks</option>
          </select>
        </div>
        <div>
          <label className="block text-sm font-semibold mb-1">Format</label>
          <select value={format} onChange={e => setFormat(e.target.value)} className="border rounded px-3 py-1">
            <option value="xlsx">Excel (.xlsx)</option>
            <option value="csv">CSV (.csv)</option>
          </select>
        </div>
        <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700" disabled={generating}>
          {generating ? 'Generating...' : 'Generate & Download'}
        </button>
        <button type="button" className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 ml-2" disabled={selected.length===0} onClick={handleBulkDelete}>
          Delete Selected
        </button>
      </form>
      {msg && <div className="text-green-600 mb-2">{msg}</div>}
      {loading && <div>Loading...</div>}
      {error && <div className="text-red-600">{error}</div>}
      {reports.length > 0 ? (
        <table className="w-full border mt-4 text-sm rounded-xl shadow-lg bg-white overflow-x-auto">
          <thead className="sticky top-0 bg-gray-50 z-10">
            <tr className="bg-gray-100">
              <th className="p-2 text-center"><input type="checkbox" checked={selected.length===reports.length && reports.length>0} onChange={e => setSelected(e.target.checked ? reports.map(r=>r._id) : [])} /></th>
              <th className="p-2 text-center">Title</th>
              <th className="p-2 text-center">Type</th>
              <th className="p-2 text-center">Created At</th>
              <th className="p-2 text-center">Actions</th>
            </tr>
          </thead>
          <tbody>
            {reports.map(r => (
              <tr key={r._id} className="border-t hover:bg-blue-50 transition-all">
                <td className="p-2 text-center">
                  <input type="checkbox" checked={selected.includes(r._id)} onChange={() => handleSelect(r._id)} />
                </td>
                <td className="p-2 text-center">{r.title || r.type}</td>
                <td className="p-2 text-center">{r.type}</td>
                <td className="p-2 text-center">{r.createdAt ? new Date(r.createdAt).toLocaleString() : ''}</td>
                <td className="p-2 text-center">
                  <button title="Download CSV" className="text-green-600 mr-2" onClick={() => handleDownload(r._id, 'csv')}>
                    <FaFileCsv size={18} />
                  </button>
                  <button title="Download Excel" className="text-yellow-600 mr-2" onClick={() => handleDownload(r._id, 'xlsx')}>
                    <FaFileExcel size={18} />
                  </button>
                  <button title="Delete" className="text-red-600" onClick={() => handleDelete(r._id)}>
                    <FaTrash size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        !loading && <div className="text-gray-600">No reports found.</div>
      )}
    </div>
  );
}
